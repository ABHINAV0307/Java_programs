OOPS-1
-object are stored in heap memory and references are stored in stack memory
-dot operator/separator is used to link instance variable with reference variable
-when value is not initialised it return as null type
-All class in java may be allocated dynamically(see compile time and runtime part)
-java is static type language(if instance part is not previously declared its going to show error)
-final variables has to be initialised while declaration
-final keyword should be written in all capital
-when a non-primitive is final you cant reassign
-FINALISED is used in java as garbage collector it is mostly called automatically

OOPS-2
-Packages are container to classes
-Properties that are not directly related to the object are called Static
-Why main is declared as static?-->if its not static you have to create object of class to run every time
-inside static you cant use anything thats not static
-you cannot use this keyword inside static class
-Outside classes cant be static- as its not dependent on any other class
-Static variables are class level stuff are resolved during compile time.
-Singleton class-can only create one object(done using private keyword)

OPPS-3
-child class is inheriting properties from base class
-java uses extend keyword to do previous point
-copy constructor is important keep in mind
-Super keyword is used to call the parent class constructor or initialise value of parent class
-Private can only be used in that block
-you can only access extra variables that are above untill and unless they are private
-It is type of reference variable not the object that determine what members can be accesed
-Multiple inheritance is not supported in java as it can have ambiguity
-The term object-based language may be used in a technical sense to describe any programming language that uses the idea of encapsulating what  and operations inside objects.
-What has to be called is determined using what is type of object used.
-Study dynamic dispatching and upcasting
-You cant override a method if it is written as final
-Study early binding and late binding
-If class is written as final it cant be further inherited
-Overriding dep ends on object whereas static doesnot depend on object therefore cant be overridden
-Abstraction is solving design level issue,Encapsulation solve implementation level issue
-Abstraction is process of gaining info, Whereas encapsulation is process of containing info
-Abstraction is done using getter and setter
-Data hiding is achieved via encapsulation
