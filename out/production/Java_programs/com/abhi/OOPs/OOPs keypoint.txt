OOPS-1
-object are stored in heap memory and references are stored in stack memory
-dot operator/separator is used to link instance variable with reference variable
-when value is not initialised it return as null type
-All class in java may be allocated dynamically(see compile time and runtime part)
-java is static type language(if instance part is not previously declared its going to show error)
-final variables has to be initialised while declaration
-final keyword should be written in all capital
-when a non-primitive is final you cant reassign
-FINALISED is used in java as garbage collector it is mostly called automatically

OOPS-2
-Packages are container to classes
-Properties that are not directly related to the object are called Static
-Why main is declared as static?-->if it's not static you have to create object of class to run every time
-inside static you cant use anything that's not static
-you cannot use this keyword inside static class
-Outside classes can't be static- as it's not dependent on any other class
-Static variables are class level stuff are resolved during compile time.
-Singleton class-can only create one object(done using private keyword)

OPPS-3
-child class is inheriting properties from base class
-java uses extend keyword to do previous point
-copy constructor is important keep in mind
-Super keyword is used to call the parent class constructor or initialise value of parent class
-Private can only be used in that block
-you can only access extra variables that are above until and unless they are private
-It is type of reference variable not the object that determine what members can be accesed
-Multiple inheritance is not supported in java as it can have ambiguity
-The term object-based language may be used in a technical sense to describe any programming language that uses the idea of encapsulating what  and operations inside objects.
-What has to be called is determined using what is type of object used.
-Study dynamic dispatching and upcasting
-You cant override a method if it is written as final
-Study early binding and late binding
-If class is written as final it cant be further inherited
-Protected data that are inherited become private data
-Overriding dep ends on object whereas static doesn't depend on object therefore cant be overridden
-Abstraction is solving design level issue,Encapsulation solve implementation level issue
-Abstraction is process of gaining info, Whereas encapsulation is process of containing info
-Abstraction is done using getter and setter
-Data hiding is achieved via encapsulation
-Default access modifier work in such a way that in same package it will act like public otherwise private

OOPS-4
-Private-->sensitive data
-Subclasses can access protected data in similar packages
-Protected-->sensitive but tempering of data is allowed
-Only the subclass can access the members in protected class if it's outside the package not even class
-Lang package is already imported
-Every class in java is inheriting object class
-Hash Code-unique representation of object by number
- "==" checks are they pointing to same object or not but .equals() checks the content of it
-See "instance of" operator (this return true or false value )
-getClass() is stored in heap

OOPS-5
-Functions that are in parent class and are needed to be overridden its good to be in abstract type
-You cant create object of abstract class as its body is empty
-In interfaces functions are static and variables are static/final
-It uses implement keyword
-Class can implement more than one interfaces but can inherit only single super class
-Multiple inheritance is implemented using interfaces
-Two classes that are not related to each other can also implement interfaces
-Works as same as dynamic method dispatch
-Don't use interfaces in performance critical code as it is done at runtime
-As all the things are directly related to main class therefore any small change in interface will reflect to all
Thus it is good to create separate classes for separate functionalities
-Nested interface can be either public private or protected whereas top level interface need to be public or default one

OOPS-6
-Arraylist stores the value one by one when space is filled it make new list of double size and store previous element then new one
-Above operation take average of constant time
-Generics help us to have specific type of value in list/custom list(using object type)
-WilCard defines what type of item you can provide
-You cant recover from error at runtime but in case of exception you can correct those
-try to tell that try all the things that are in block but if any error come go to catch
-There is difference between throw and throws as throws tell that this may throw exception
-finally used can only be used once
-the part "implement Cloneable" tells JVM that we are going to use clone further for object cloning
-Learn about shallow and deep copy of object

OOPS-7
-None